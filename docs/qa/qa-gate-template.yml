# Quality Gate Template - Cleanops Elixir Project
# Template for QA teams to create comprehensive quality gate reports

schema: 1
story: "{story_number}"
story_title: "{story_title}"
gate: "{PASS|CONCERNS|FAIL}"
status_reason: "{Brief explanation of gate status}"
reviewer: "{QA Reviewer Name}"
updated: "{ISO_8601_timestamp}"

waiver: 
  active: false
  # If active: true, add reason: "explanation for waiver"

# MANDATORY: Pre-Push Hook Validation
pre_push_validation:
  executed: true  # REQUIRED: Must be true for all stories
  status: "{PASS|FAIL}"
  hook_output: |
    # Paste complete output from .git/hooks/pre-push execution here
    # Include both successful runs and any failure messages
  issues_found:
    # List any issues found by the pre-push hook
    - id: "HOOK-001"
      category: "{formatting|compilation|tests|credo|dialyzer|dependencies}"
      finding: "{Description of what the hook found}"
      severity: "{critical|high|medium|low}"
      action_required: "{What needs to be fixed}"
  resolution:
    status: "{resolved|pending|waived}"
    # If resolved: Include verification that hook now passes
    # If pending: Include timeline for resolution  
    # If waived: Include justification

# Top critical issues (limit to 5 most important)
top_issues:
  - id: "{UNIQUE_ID}"
    severity: "{critical|high|medium|low}"
    finding: "{Description of issue found}"
    suggested_action: "{Recommended fix or next step}"
    suggested_owner: "{dev|po|qa|arch}"

# Overall quality score (0-100)
quality_score: 0

# Gate expires after this date (2 weeks from creation)
expires: "{ISO_8601_timestamp}"

# Evidence collected during review
evidence:
  tests_reviewed: 0
  risks_identified: 0
  pre_push_executed: true  # MANDATORY: Always true
  dialyzer_clean: "{true|false}"  # From pre-push hook
  credo_issues: 0  # Count from pre-push hook
  test_failures: 0  # Count from pre-push hook
  trace:
    ac_covered: []  # List of covered acceptance criteria numbers
    ac_gaps: []     # List of uncovered acceptance criteria numbers

# Non-functional requirement validation
nfr_validation:
  security:
    status: "{PASS|CONCERNS|FAIL}"
    notes: "{Security review findings}"
  performance:
    status: "{PASS|CONCERNS|FAIL}" 
    notes: "{Performance review findings}"
  reliability:
    status: "{PASS|CONCERNS|FAIL}"
    notes: "{Reliability review findings}"
  maintainability:
    status: "{PASS|CONCERNS|FAIL}"
    notes: "{Maintainability review findings}"
  type_safety:
    status: "{PASS|CONCERNS|FAIL}"
    notes: "{Dialyzer and typespec review findings}"

# Actionable recommendations
recommendations:
  immediate:
    - action: "{Required action for story completion}"
      refs: ["{file_references}"]
  future:
    - action: "{Future improvement recommendation}"
      refs: ["{file_references}"]

# Quality metrics from pre-push hook
hook_metrics:
  compilation_time: "{seconds}"
  test_execution_time: "{seconds}"
  test_count: 0
  test_failures: 0
  credo_issues_total: 0
  credo_issues_critical: 0
  dialyzer_warnings: 0
  formatting_issues: 0